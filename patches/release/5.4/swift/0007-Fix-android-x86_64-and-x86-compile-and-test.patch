From e1e3863f2bba9896367f39764f3979b741c1e89a Mon Sep 17 00:00:00 2001
From: Anton Pogonets <apogonets@readdle.com>
Date: Mon, 5 Apr 2021 20:45:32 +0300
Subject: [PATCH 7/7] Fix android x86_64 and x86 compile and test

---
 test/ClangImporter/cfuncs_parse.swift            |  2 +-
 test/DebugInfo/modulecache.swift                 |  2 +-
 test/Frontend/embed-bitcode.swift                |  2 ++
 test/IRGen/c_layout.sil                          | 16 ++++++++++++++++
 test/IRGen/condfail.sil                          |  1 +
 test/IRGen/errors.sil                            |  3 +++
 test/IRGen/objc_simd.sil                         |  4 ++++
 test/IRGen/pic.swift                             |  8 +++++++-
 test/IRGen/static_initializer.sil                |  1 +
 test/IRGen/yield_once_biggish.sil                |  1 +
 .../Cxx/operators/member-inline-irgen.swift      |  1 +
 .../Cxx/operators/member-out-of-line-irgen.swift |  1 +
 .../operators/non-member-out-of-line-irgen.swift |  1 +
 test/Parse/enum.swift                            |  2 ++
 test/Reflection/typeref_decoding_asan.swift      |  3 +++
 ...gnostic_constant_propagation_floats_x86.swift |  2 ++
 test/lit.cfg                                     |  8 ++++++--
 test/stdlib/FloatingPointIR.swift                |  3 +++
 test/stdlib/FloatingPointIR_FP80.swift           |  2 ++
 utils/build-script-impl                          |  5 +++++
 20 files changed, 63 insertions(+), 5 deletions(-)

diff --git a/test/ClangImporter/cfuncs_parse.swift b/test/ClangImporter/cfuncs_parse.swift
index 746dce15787..9a167906e46 100644
--- a/test/ClangImporter/cfuncs_parse.swift
+++ b/test/ClangImporter/cfuncs_parse.swift
@@ -64,7 +64,7 @@ func test_pow() {
   pow(1.5, 2.5)
 }
 
-#if !((os(Android) || os(Linux)) && arch(arm64))
+#if !((os(Linux) && arch(arm64)) || (os(Android) && (arch(arm64) || arch(x86_64) || arch(i386))))
 // long doubles in AAPCS64 are 128 bits, which is not supported by
 // Swift, so don't test this. SR-9072.
 func test_powl() {
diff --git a/test/DebugInfo/modulecache.swift b/test/DebugInfo/modulecache.swift
index 1dceafbf15d..959e9c81e39 100644
--- a/test/DebugInfo/modulecache.swift
+++ b/test/DebugInfo/modulecache.swift
@@ -16,7 +16,7 @@ import ClangModule
 // RUN: %empty-directory(%t)
 // RUN: %target-swift-frontend %s -c -g -o %t.o -module-cache-path %t -I %S/Inputs
 // RUN: llvm-readobj -h %t/*/ClangModule-*.pcm | %FileCheck %s
-// CHECK: Format: {{(Mach-O|ELF|elf64|COFF|elf32-littlearm)}}
+// CHECK: Format: {{(Mach-O|ELF|elf64|COFF|elf32-littlearm|elf32-i386)}}
 
 // 3. Test that swift-ide-check will not share swiftc's module cache.
 
diff --git a/test/Frontend/embed-bitcode.swift b/test/Frontend/embed-bitcode.swift
index 9f59002b561..0fad2d35b95 100644
--- a/test/Frontend/embed-bitcode.swift
+++ b/test/Frontend/embed-bitcode.swift
@@ -10,6 +10,8 @@
 // UNSUPPORTED: OS=freebsd
 // UNSUPPORTED: OS=openbsd
 // UNSUPPORTED: OS=windows-msvc
+// UNSUPPORTED: OS=linux-android
+// UNSUPPORTED: OS=linux-androideabi
 
 // MARKER: Contents of (__LLVM,__bitcode) section
 // MARKER-NEXT: 00
diff --git a/test/IRGen/c_layout.sil b/test/IRGen/c_layout.sil
index 8cdbc741134..226906c542e 100644
--- a/test/IRGen/c_layout.sil
+++ b/test/IRGen/c_layout.sil
@@ -173,6 +173,22 @@ bb0:
 // CHECK-i386-LABEL: declare{{( dllimport)?}} i32 @ints(i32)
 // CHECK-i386-LABEL: declare{{( dllimport)?}} i32 @unsigneds(i32)
 
+// CHECK-i686-LABEL: define{{( dllexport)?}}{{( protected)?}} swiftcc void @testIntegerExtension
+// CHECK-i686:         call signext i8 @chareth(i8 signext
+// CHECK-i686:         call signext i8 @signedChareth(i8 signext
+// CHECK-i686:         call zeroext i8 @unsignedChareth(i8 zeroext
+// CHECK-i686:         call signext i16 @eatMyShorts(i16 signext
+// CHECK-i686:         call zeroext i16 @eatMyUnsignedShorts(i16 zeroext
+// CHECK-i686:         call i32 @ints(i32 %5)
+// CHECK-i686:         call i32 @unsigneds(i32 %6)
+// CHECK-i686-LABEL: declare{{( dllimport)?}} signext i8 @chareth(i8 signext)
+// CHECK-i686-LABEL: declare{{( dllimport)?}} signext i8 @signedChareth(i8 signext)
+// CHECK-i686-LABEL: declare{{( dllimport)?}} zeroext i8 @unsignedChareth(i8 zeroext)
+// CHECK-i686-LABEL: declare{{( dllimport)?}} signext i16 @eatMyShorts(i16 signext)
+// CHECK-i686-LABEL: declare{{( dllimport)?}} zeroext i16 @eatMyUnsignedShorts(i16 zeroext)
+// CHECK-i686-LABEL: declare{{( dllimport)?}} i32 @ints(i32)
+// CHECK-i686-LABEL: declare{{( dllimport)?}} i32 @unsigneds(i32)
+
 // CHECK-armv7-LABEL:         define{{( dllexport)?}}{{( protected)?}} swiftcc void @testIntegerExtension
 // CHECK-ios-armv7:             call signext i8 @chareth(i8 signext
 // CHECK-ios-armv7:             call signext i8 @signedChareth(i8 signext
diff --git a/test/IRGen/condfail.sil b/test/IRGen/condfail.sil
index ebdc6b92318..e4b2bf400dd 100644
--- a/test/IRGen/condfail.sil
+++ b/test/IRGen/condfail.sil
@@ -1,5 +1,6 @@
 // RUN: %target-swift-frontend -primary-file %s -O -g -S  | %FileCheck %s --check-prefix CHECK --check-prefix CHECK-%target-cpu --check-prefix CHECK-OPT-%target-os
 // RUN: %target-swift-frontend -primary-file %s -g -S  | %FileCheck %s --check-prefix CHECK --check-prefix CHECK-%target-cpu --check-prefix CHECK-NOOPT-%target-os
+// UNSUPPORTED: OS=linux-android && (CPU=i686 || CPU=x86_64)
 
 import Builtin
 import Swift
diff --git a/test/IRGen/errors.sil b/test/IRGen/errors.sil
index f8fba2b88c3..54d8363a759 100644
--- a/test/IRGen/errors.sil
+++ b/test/IRGen/errors.sil
@@ -16,6 +16,7 @@ entry:
 }
 
 // CHECK-LABEL-i386:   define{{( dllexport)?}}{{( protected)?}} swiftcc void @does_throw(%swift.refcounted* swiftself %0, %swift.error** %1) {{.*}} {
+// CHECK-LABEL-i686:   define{{( dllexport)?}}{{( protected)?}} swiftcc void @does_throw(%swift.refcounted* swiftself %0, %swift.error** %1) {{.*}} {
 // CHECK-LABEL-x86_64: define{{( dllexport)?}}{{( protected)?}} swiftcc void @does_throw(%swift.refcounted* swiftself %0, %swift.error** swifterror %1) {{.*}} {
 // CHECK-LABEL-armv7:  define{{( dllexport)?}}{{( protected)?}} swiftcc void @does_throw(%swift.refcounted* swiftself %0, %swift.error** swifterror %1) {{.*}} {
 // CHECK-LABEL-armv7s: define{{( dllexport)?}}{{( protected)?}} swiftcc void @does_throw(%swift.refcounted* swiftself %0, %swift.error** swifterror %1) {{.*}} {
@@ -38,6 +39,7 @@ sil @does_throw : $@convention(thin) () -> @error Error {
 }
 
 // CHECK-LABEL-i386:   define{{( dllexport)?}}{{( protected)?}} swiftcc void @doesnt_throw(%swift.refcounted* swiftself %0, %swift.error** %1) {{.*}} {
+// CHECK-LABEL-i686:   define{{( dllexport)?}}{{( protected)?}} swiftcc void @doesnt_throw(%swift.refcounted* swiftself %0, %swift.error** %1) {{.*}} {
 // CHECK-LABEL-x86_64: define{{( dllexport)?}}{{( protected)?}} swiftcc void @doesnt_throw(%swift.refcounted* swiftself %0, %swift.error** swifterror %1) {{.*}} {
 // CHECK-LABEL-armv7:  define{{( dllexport)?}}{{( protected)?}} swiftcc void @doesnt_throw(%swift.refcounted* swiftself %0, %swift.error** swifterror %1) {{.*}} {
 // CHECK-LABEL-armv7s: define{{( dllexport)?}}{{( protected)?}} swiftcc void @doesnt_throw(%swift.refcounted* swiftself %0, %swift.error** swifterror %1) {{.*}} {
@@ -61,6 +63,7 @@ sil @try_apply_helper : $@convention(thin) (@owned AnyObject) -> (@owned AnyObje
 sil @try_apply : $@convention(thin) (@owned AnyObject) -> () {
 entry(%0 : $AnyObject):
   // CHECK-i386:        [[ERRORSLOT:%.*]] = alloca [[SWIFTERROR:.*]]%swift.error*, align
+  // CHECK-i686:        [[ERRORSLOT:%.*]] = alloca [[SWIFTERROR:.*]]%swift.error*, align
   // CHECK-x86_64:      [[ERRORSLOT:%.*]] = alloca [[SWIFTERROR:.*]] %swift.error*, align
   // CHECK-armv7:       [[ERRORSLOT:%.*]] = alloca [[SWIFTERROR:.*]] %swift.error*, align
   // CHECK-armv7s:      [[ERRORSLOT:%.*]] = alloca [[SWIFTERROR:.*]] %swift.error*, align
diff --git a/test/IRGen/objc_simd.sil b/test/IRGen/objc_simd.sil
index 210094ed1f9..975527b44a2 100644
--- a/test/IRGen/objc_simd.sil
+++ b/test/IRGen/objc_simd.sil
@@ -15,6 +15,7 @@ func forceStuff(x: float4, y: float3) -> (Float, Float, Float, Float) {
 
 // x86_64-LABEL: define{{( dllexport)?}}{{( protected)?}} <4 x float> @simd_c_args(<4 x float> %0)
 // i386-LABEL: define{{( dllexport)?}}{{( protected)?}} <2 x i64> @simd_c_args(<4 x float> %0)
+// i686-LABEL: define{{( dllexport)?}}{{( protected)?}} <4 x float> @simd_c_args(<4 x float> %0)
 // aarch64-LABEL: define{{( dllexport)?}}{{( protected)?}} <4 x float> @simd_c_args(<4 x float> %0)
 // arm64-LABEL: define{{( dllexport)?}}{{( protected)?}} <4 x float> @simd_c_args(<4 x float> %0)
 // arm64e-LABEL: define{{( dllexport)?}}{{( protected)?}} <4 x float> @simd_c_args(<4 x float> %0)
@@ -32,6 +33,7 @@ entry(%x : $float4):
 
 // x86_64-LABEL: define{{( dllexport)?}}{{( protected)?}} <3 x float> @simd_c_args_float3(<3 x float> %0)
 // i386-LABEL: define{{( dllexport)?}}{{( protected)?}} <2 x i64> @simd_c_args_float3(<3 x float> %0)
+// i686-LABEL: define{{( dllexport)?}}{{( protected)?}} <3 x float> @simd_c_args_float3(<3 x float> %0)
 // aarch64-LABEL: define{{( dllexport)?}}{{( protected)?}} <3 x float> @simd_c_args_float3(<4 x i32> %0)
 // arm64-LABEL: define{{( dllexport)?}}{{( protected)?}} <3 x float> @simd_c_args_float3(<4 x i32> %0)
 // arm64e-LABEL: define{{( dllexport)?}}{{( protected)?}} <3 x float> @simd_c_args_float3(<4 x i32> %0)
@@ -55,6 +57,7 @@ entry(%x : $float3):
 
 // x86_64-LABEL: define{{( dllexport)?}}{{( protected)?}} swiftcc { float, float, float, float } @simd_native_args(float %0, float %1, float %2, float %3)
 // i386-LABEL: define{{( dllexport)?}}{{( protected)?}} swiftcc void @simd_native_args(%T4simd6float4V* noalias nocapture sret %0, %T4simd6float4V* noalias nocapture dereferenceable({{.*}}) %1)
+// i686-LABEL: define{{( dllexport)?}}{{( protected)?}} swiftcc void @simd_native_args(%T4simd6float4V* noalias nocapture sret %0, %T4simd6float4V* noalias nocapture dereferenceable({{.*}}) %1)
 // aarch64-LABEL: define{{( dllexport)?}}{{( protected)?}} swiftcc { float, float, float, float } @simd_native_args(float %0, float %1, float %2, float %3)
 // arm64-LABEL: define{{( dllexport)?}}{{( protected)?}} swiftcc { float, float, float, float } @simd_native_args(float %0, float %1, float %2, float %3)
 // armv6-LABEL: define{{( dllexport)?}}{{( protected)?}} swiftcc void @simd_native_args(%T4simd6float4V* noalias nocapture sret %0, %T4simd6float4V* noalias nocapture dereferenceable({{.*}}) %1)
@@ -73,6 +76,7 @@ entry(%x : $float4):
 
 // x86_64-LABEL: define{{( dllexport)?}}{{( protected)?}} swiftcc { float, float, float }  @simd_native_args_float3(float %0, float %1, float %2)
 // i386-LABEL: define{{( dllexport)?}}{{( protected)?}} swiftcc { float, float, float } @simd_native_args_float3(float %0, float %1, float %2)
+// i686-LABEL: define{{( dllexport)?}}{{( protected)?}} swiftcc { float, float, float } @simd_native_args_float3(float %0, float %1, float %2)
 // aarch64-LABEL: define{{( dllexport)?}}{{( protected)?}} swiftcc { float, float, float } @simd_native_args_float3(float %0, float %1, float %2)
 // arm64-LABEL: define{{( dllexport)?}}{{( protected)?}} swiftcc { float, float, float } @simd_native_args_float3(float %0, float %1, float %2)
 // armv6-LABEL: define{{( dllexport)?}}{{( protected)?}} swiftcc { float, float, float } @simd_native_args_float3(float %0, float %1, float %2)
diff --git a/test/IRGen/pic.swift b/test/IRGen/pic.swift
index def763b6bb0..619a09d6c13 100644
--- a/test/IRGen/pic.swift
+++ b/test/IRGen/pic.swift
@@ -2,7 +2,7 @@
 // platforms.
 
 // SR-12194
-// XFAIL: OS=linux-android, CPU=aarch64
+// XFAIL: OS=linux-android && CPU=aarch64
 // UNSUPPORTED: OS=linux-gnu
 
 // RUN: %target-swift-frontend %s -module-name main -S -o - | %FileCheck -check-prefix=%target-cpu -check-prefix=%target-cpu-%target-sdk-name %s
@@ -21,6 +21,12 @@ public func use_global() -> Int {
 // i386:         popl [[PIC_REG:%[a-z]+]]
 // i386:         movl {{_?}}$s4main6globalSivp-[[PIC_BLOCK]]([[PIC_REG]]), {{%[a-z]+}}
 
+// i686-LABEL: {{_?}}$s4main10use_globalSiyF:
+// i686:       [[PIC_BLOCK:^\.L.*\$pb]]:{{$}}
+// i686:         popl [[PIC_REG:%[a-z]+]]
+// i686:         addl $_GLOBAL_OFFSET_TABLE_+(.Ltmp1-[[PIC_BLOCK]]), [[PIC_REG]]
+// i686:         movl {{_?}}($s4main6globalSivp)@GOTOFF([[PIC_REG]]), {{%[a-z]+}}
+
 // armv7-LABEL: {{_?}}$s4main10use_globalSiyF:
 // Check for the runtime memory enforcement call. The global address may be
 // materialized in a different register prior to that call.
diff --git a/test/IRGen/static_initializer.sil b/test/IRGen/static_initializer.sil
index a7a1863049a..ffea79b2523 100644
--- a/test/IRGen/static_initializer.sil
+++ b/test/IRGen/static_initializer.sil
@@ -1,6 +1,7 @@
 // RUN: %target-swift-frontend %s -emit-ir | %FileCheck %s -check-prefix CHECK -check-prefix CHECK-%target-abi
 
 // REQUIRES: CPU=x86_64
+// UNSUPPORTED: OS=linux-android
 
 // Generated from
 // var x : Int32 = 2
diff --git a/test/IRGen/yield_once_biggish.sil b/test/IRGen/yield_once_biggish.sil
index 5aeb62d922f..3332a7ef731 100644
--- a/test/IRGen/yield_once_biggish.sil
+++ b/test/IRGen/yield_once_biggish.sil
@@ -5,6 +5,7 @@
 // to just rule out i386 for now.  If we end up with many similar exceptions,
 // we should turn this into a REQUIRES instead.
 // UNSUPPORTED: CPU=i386
+// UNSUPPORTED: CPU=i686
 
 import Builtin
 import Swift
diff --git a/test/Interop/Cxx/operators/member-inline-irgen.swift b/test/Interop/Cxx/operators/member-inline-irgen.swift
index 7395e06f395..6e318f5d61a 100644
--- a/test/Interop/Cxx/operators/member-inline-irgen.swift
+++ b/test/Interop/Cxx/operators/member-inline-irgen.swift
@@ -2,6 +2,7 @@
 //
 // We can't yet call member functions correctly on Windows (SR-13129).
 // XFAIL: OS=windows-msvc
+// UNSUPPORTED: CPU=i686
 
 import MemberInline
 
diff --git a/test/Interop/Cxx/operators/member-out-of-line-irgen.swift b/test/Interop/Cxx/operators/member-out-of-line-irgen.swift
index 7dd42207629..496b6e12968 100644
--- a/test/Interop/Cxx/operators/member-out-of-line-irgen.swift
+++ b/test/Interop/Cxx/operators/member-out-of-line-irgen.swift
@@ -2,6 +2,7 @@
 //
 // We can't yet call member functions correctly on Windows (SR-13129).
 // XFAIL: OS=windows-msvc
+// UNSUPPORTED: CPU=i686
 
 import MemberOutOfLine
 
diff --git a/test/Interop/Cxx/operators/non-member-out-of-line-irgen.swift b/test/Interop/Cxx/operators/non-member-out-of-line-irgen.swift
index 456520b248e..92ef03ff5cf 100644
--- a/test/Interop/Cxx/operators/non-member-out-of-line-irgen.swift
+++ b/test/Interop/Cxx/operators/non-member-out-of-line-irgen.swift
@@ -1,4 +1,5 @@
 // RUN: %target-swift-emit-ir %s -I %S/Inputs -enable-cxx-interop | %FileCheck %s
+// UNSUPPORTED: CPU=i686
 
 import NonMemberOutOfLine
 
diff --git a/test/Parse/enum.swift b/test/Parse/enum.swift
index 83bee6d5464..4397fb759f7 100644
--- a/test/Parse/enum.swift
+++ b/test/Parse/enum.swift
@@ -7,6 +7,8 @@
 
 // Windows does not support FP80
 // XFAIL: OS=windows-msvc
+// UNSUPPORTED: OS=linux-android
+// UNSUPPORTED: OS=linux-androideabi
 
 enum Empty {}
 
diff --git a/test/Reflection/typeref_decoding_asan.swift b/test/Reflection/typeref_decoding_asan.swift
index 57a186df27d..acecde8f1ec 100644
--- a/test/Reflection/typeref_decoding_asan.swift
+++ b/test/Reflection/typeref_decoding_asan.swift
@@ -1,4 +1,7 @@
 // REQUIRES: asan_runtime
+// UNSUPPORTED: OS=linux-android
+// UNSUPPORTED: OS=linux-androideabi
+
 // RUN: %empty-directory(%t)
 // RUN: %target-build-swift %S/Inputs/ConcreteTypes.swift %S/Inputs/GenericTypes.swift %S/Inputs/Protocols.swift %S/Inputs/Extensions.swift %S/Inputs/Closures.swift -parse-as-library -emit-module -emit-library -module-name TypesToReflect -sanitize=address -o %t/%target-library-name(TypesToReflect)
 // RUN: %target-swift-reflection-dump -binary-filename %t/%target-library-name(TypesToReflect) | %FileCheck %s
diff --git a/test/SILOptimizer/diagnostic_constant_propagation_floats_x86.swift b/test/SILOptimizer/diagnostic_constant_propagation_floats_x86.swift
index c32c83d7d98..1823b86c450 100644
--- a/test/SILOptimizer/diagnostic_constant_propagation_floats_x86.swift
+++ b/test/SILOptimizer/diagnostic_constant_propagation_floats_x86.swift
@@ -3,6 +3,8 @@
 //
 // REQUIRES: CPU=i386 || CPU=x86_64
 // UNSUPPORTED: OS=windows-msvc
+// UNSUPPORTED: OS=linux-android
+// UNSUPPORTED: OS=linux-androideabi
 //
 // These are tests for diagnostics produced by constant propagation pass
 // on floating-point operations that are specific to x86 architectures,
diff --git a/test/lit.cfg b/test/lit.cfg
index d1f37aa64c3..83f2ab40764 100644
--- a/test/lit.cfg
+++ b/test/lit.cfg
@@ -1354,9 +1354,13 @@ elif run_os == 'linux-androideabi' or run_os == 'linux-android':
         return result
 
     ndk_platform_tuple = get_architecture_value(armv7="armeabi-v7a",
-                                                aarch64="arm64-v8a")
+                                                aarch64="arm64-v8a",
+                                                i686="x86",
+                                                x86_64="x86_64")
     ndk_platform_triple = get_architecture_value(armv7="arm-linux-androideabi",
-                                                 aarch64="aarch64-linux-android")
+                                                 aarch64="aarch64-linux-android",
+                                                 i686="i686-linux-android",
+                                                 x86_64="x86_64-linux-android")
     if platform.system() == 'Linux':
         prebuilt_directory = 'linux-x86_64'
     elif platform.system() == 'Darwin':
diff --git a/test/stdlib/FloatingPointIR.swift b/test/stdlib/FloatingPointIR.swift
index ff370af0099..7cb44319acb 100644
--- a/test/stdlib/FloatingPointIR.swift
+++ b/test/stdlib/FloatingPointIR.swift
@@ -23,6 +23,9 @@ func testConstantFoldFloatLiterals() {
 // i386: call swiftcc void @"$s15FloatingPointIR13acceptFloat32yySfF{{.*}}"(float 1.000000e+00)
 // i386: call swiftcc void @"$s15FloatingPointIR13acceptFloat64yySdF{{.*}}"(double 1.000000e+00)
 
+// i686: call swiftcc void @"$s15FloatingPointIR13acceptFloat32yySfF{{.*}}"(float 1.000000e+00)
+// i686: call swiftcc void @"$s15FloatingPointIR13acceptFloat64yySdF{{.*}}"(double 1.000000e+00)
+
 // x86_64: call swiftcc void @"$s15FloatingPointIR13acceptFloat32yySfF{{.*}}"(float 1.000000e+00)
 // x86_64: call swiftcc void @"$s15FloatingPointIR13acceptFloat64yySdF{{.*}}"(double 1.000000e+00)
 
diff --git a/test/stdlib/FloatingPointIR_FP80.swift b/test/stdlib/FloatingPointIR_FP80.swift
index a5f0344ec05..c91a018f8fe 100644
--- a/test/stdlib/FloatingPointIR_FP80.swift
+++ b/test/stdlib/FloatingPointIR_FP80.swift
@@ -4,6 +4,8 @@
 
 // REQUIRES: CPU=i386 || CPU=x86_64
 // UNSUPPORTED: OS=windows-msvc
+// UNSUPPORTED: OS=linux-android
+// UNSUPPORTED: OS=linux-androideabi
 
 var globalFloat80 : Float80 = 0.0
 
diff --git a/utils/build-script-impl b/utils/build-script-impl
index a55ca91e632..041938dc8ff 100755
--- a/utils/build-script-impl
+++ b/utils/build-script-impl
@@ -416,6 +416,7 @@ function verify_host_is_supported() {
       | watchos-armv7k          \
       | android-armv7           \
       | android-aarch64         \
+      | android-i686            \
       | android-x86_64)
         ;;
       *)
@@ -460,6 +461,10 @@ function set_build_options_for_host() {
             SWIFT_HOST_TRIPLE="armv7-unknown-linux-androideabi${ANDROID_API_LEVEL}"
             llvm_target_arch="ARM"
             ;;
+        android-i686)
+            SWIFT_HOST_TRIPLE="i686-none-linux-android${ANDROID_API_LEVEL}"
+            llvm_target_arch="X86"
+            ;;
         android-x86_64)
             SWIFT_HOST_TRIPLE="x86_64-unknown-linux-android${ANDROID_API_LEVEL}"
             llvm_target_arch="X86"
-- 
2.29.2

